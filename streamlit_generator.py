import os
import streamlit as st
import json
from google.oauth2.service_account import Credentials

st.set_page_config(page_title="CRM –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", layout="centered")

# === –ù–ê–°–¢–†–û–ô–ö–ò –ü–ê–ü–û–ö ===
TEMPLATE_DIR = "templates"
OUTPUT_DIR = "output"
os.makedirs(OUTPUT_DIR, exist_ok=True)


# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò ===
if 'page' not in st.session_state:
    st.session_state['page'] = 'main_menu'
if 'form_data' not in st.session_state:
    st.session_state['form_data'] = {}

if st.session_state['page'] == 'main_menu':
    st.title("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Leads-Solver")

    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    col1, col2 = st.columns(2)

    with col1:
        if st.button("üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–ª–∏–µ–Ω—Ç—É"):
            st.session_state['page'] = 'select_parameters'

    with col2:
        if st.button("üìã –†–µ–µ—Å—Ç—Ä –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤"):
            st.session_state['page'] = 'unpaid_registry'

elif st.session_state['page'] == 'select_parameters':
    st.title("üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É")

    with st.form("doc_parameters_form"):
        our_company = st.selectbox("üìå –û—Ç –∫–∞–∫–æ–≥–æ —é—Ä–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç?", ["–û–û–û –ö–ª–∏–µ–Ω—Ç–æ–ª–æ–≥–∏—è", "–ò–ü –ú–∞—Ç–≤–µ–π—á—É–∫ –°.–†."])
        payer_type = st.selectbox("üë§ –ö—Ç–æ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫?", ["–û–û–û", "–ò–ü", "–§–∏–∑–ª–∏—Ü–æ"])
        service_type = st.selectbox("üíº –¢–∏–ø —É—Å–ª—É–≥–∏:", [
            "–û–ø–ª–∞—Ç–∞ –∑–∞ –Ω–æ–º–µ—Ä–∞",
            "–ù–æ–º–µ—Ä–∞ —Å –ö–¶ –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–∏",
            "–ù–æ–º–µ—Ä–∞ —Å –ö–¶ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π",
            "–û–ø–ª–∞—Ç–∞ –∑–∞ –õ–∏–¥"
        ])
        doc_type = st.selectbox("üìÑ –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã?", [
            "–°—á—ë—Ç –∏ –¥–æ–≥–æ–≤–æ—Ä",
            "–¢–æ–ª—å–∫–æ —Å—á—ë—Ç"
        ])

        submitted = st.form_submit_button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
        if submitted:
            st.session_state['combo'] = (our_company, payer_type, service_type, doc_type)
            st.session_state['page'] = 'fill_fields_placeholder'

    if st.button("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"):
        st.session_state['page'] = 'main_menu'

elif st.session_state['page'] == 'fill_fields_placeholder':
    import re
    from docx import Document
    from datetime import datetime
    from docxtpl import DocxTemplate
    from googleapiclient.discovery import build
    from googleapiclient.http import MediaFileUpload
    from num2words import num2words
    import gspread
    import json
    from google.oauth2.service_account import Credentials

    def extract_ordered_variables_from_docx(doc_path):
        doc = Document(doc_path)
        seen = set()
        ordered_vars = []

        def extract_from_text(text):
            for match in re.findall(r"{{(.*?)}}", text):
                if match not in seen:
                    seen.add(match)
                    ordered_vars.append(match)

        for p in doc.paragraphs:
            extract_from_text(p.text)

        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    extract_from_text(cell.text)

        return ordered_vars

    with open("template_map.json", encoding="utf-8") as f:
        template_map = json.load(f)
    with open("field_labels.json", encoding="utf-8") as f:
        field_labels = json.load(f)
    with open("responsible_list.json", encoding="utf-8") as f:
        responsible_data = json.load(f)
    responsible_names = [item["name"] for item in responsible_data]

    selected_combo = st.session_state['combo']
    selected_entry = next((item for item in template_map if (
        item['our_company'] == selected_combo[0] and
        item['payer_type'] == selected_combo[1] and
        item['service_type'] == selected_combo[2] and
        item['doc_type'] == selected_combo[3]
    )), None)

    if not selected_entry:
        st.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ template_map.json –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é.")
    else:
        # –¢–æ–ª—å–∫–æ —Ä–µ–Ω–¥–µ—Ä–∏–º —Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –º—ã –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if st.session_state['page'] == 'fill_fields_placeholder':
            st.title("üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ —à–∞–±–ª–æ–Ω—É")
            ordered_vars = []
            seen_vars = set()

            for template_file in selected_entry['template_paths']:
                path = os.path.join(TEMPLATE_DIR, template_file)
                if not os.path.exists(path):
                    st.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_file}")
                else:
                    vars_from_template = extract_ordered_variables_from_docx(path)
                    for var in vars_from_template:
                        if var not in seen_vars and not var.endswith("_words"):
                            seen_vars.add(var)
                            ordered_vars.append(var)

            input_values = {}

            with st.form("fill_form"):
                st.write(f"üìÑ –®–∞–±–ª–æ–Ω—ã: {', '.join(selected_entry['template_paths'])}")
                for var in ordered_vars:
                    label = field_labels.get(var, f"{{{{{var}}}}}")
                    value = st.text_input(label, value=st.session_state['form_data'].get(var, ""))
                    input_values[var] = value

                st.subheader("üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —É—á—ë—Ç–∞")
                input_values["deal_link"] = st.text_input("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å", value=st.session_state['form_data'].get("deal_link", ""))
                input_values["deal_type"] = st.selectbox("üìå –¢–∏–ø —Å–¥–µ–ª–∫–∏", ["–ù–æ–≤—ã–π", "–ü—Ä–æ–ª–æ–Ω–≥–∞—Ü–∏—è"])
                input_values["responsible"] = st.selectbox("üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", responsible_names)

                submitted = st.form_submit_button("‚û°Ô∏è –°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
                if submitted:
                    try:
                        scopes = ["https://www.googleapis.com/auth/spreadsheets"]

                        secret_json = st.secrets["gcp_service_account"]["json"]
                        service_account_info = json.loads(secret_json)
                        service_account_info["private_key"] = service_account_info["private_key"].replace('\\n', '\n')
                        credentials = Credentials.from_service_account_info(service_account_info, scopes=scopes)

                        client = gspread.authorize(credentials)
                        sh = client.open_by_url("https://docs.google.com/spreadsheets/d/1AeW7yFTp2KIVPoDoGgouvLRNkf80pLIyz-I9gIeQKL4/edit/")
                        worksheet = sh.worksheet("–†–µ–µ—Å—Ç—Ä –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤")

                        row = [
                            input_values.get("deal_link", ""),
                            input_values.get("deal_type", ""),
                            input_values.get("responsible", ""),
                            input_values.get("total_amount", ""),
                            input_values.get("invoice_date", ""),
                            input_values.get("contract_number", ""),
                            input_values.get("payer_fio", "") or input_values.get("client_short_name", "")
                        ]
                        worksheet.append_row(row)

                        def upload_to_gdrive(filepath, filename):
                            drive_scopes = ["https://www.googleapis.com/auth/drive"]
                            drive_service_account_info = service_account_info.copy()
                            drive_credentials = Credentials.from_service_account_info(drive_service_account_info, scopes=drive_scopes)
                            drive_service = build("drive", "v3", credentials=drive_credentials)
                            file_metadata = {"name": filename, "parents": ["1z-b3pc71PMxjeU9tgwmIgjIKYLUYaEPM"]}
                            media = MediaFileUpload(filepath, resumable=True)
                            drive_service.files().create(body=file_metadata, media_body=media, fields="id").execute()

                        st.session_state['generated_files'] = []

                        for template_file in selected_entry['template_paths']:
                            tpl_path = os.path.join(TEMPLATE_DIR, template_file)
                            doc = DocxTemplate(tpl_path)
                            context = input_values.copy()

                            for key in list(context.keys()):
                                if key.endswith("_numeric"):
                                    try:
                                        number = float(context[key])
                                        if number.is_integer():
                                            number = int(number)
                                        context[key.replace("_numeric", "_words")] = num2words(number, lang='ru')
                                    except:
                                        context[key.replace("_numeric", "_words")] = "[–æ—à–∏–±–∫–∞]"

                            doc.render(context)

                            prefix = "–°–ß–Å–¢" if "—Å—á–µ—Ç" in template_file.lower() or "—Å—á—ë—Ç" in template_file.lower() else "–î–û–ì–û–í–û–†"
                            postfix = context.get("contract_number", "–±–µ–∑_–Ω–æ–º–µ—Ä–∞")
                            filename = f"{prefix}-{postfix}.docx"
                            full_path = os.path.join(OUTPUT_DIR, filename)
                            doc.save(full_path)
                            upload_to_gdrive(full_path, filename)
                            st.session_state['generated_files'].append((filename, full_path))

                        st.session_state['form_data'] = input_values
                        st.session_state['page'] = 'document_download'

                    except Exception as e:
                        st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")

        if st.button("üîô –ù–∞–∑–∞–¥"):
            st.session_state['page'] = 'select_parameters'

elif st.session_state['page'] == 'unpaid_registry':
    st.title("üìã –†–µ–µ—Å—Ç—Ä –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤")

    try:
        import gspread
        import pandas as pd

        scopes = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
        secret_json = st.secrets["gcp_service_account"]["json"]
        service_account_info = json.loads(secret_json)
        service_account_info["private_key"] = service_account_info["private_key"].replace('\\n', '\n')
        credentials = Credentials.from_service_account_info(service_account_info, scopes=scopes)
        client = gspread.authorize(credentials)

        sh = client.open_by_url("https://docs.google.com/spreadsheets/d/1AeW7yFTp2KIVPoDoGgouvLRNkf80pLIyz-I9gIeQKL4/edit/")
        worksheet = sh.worksheet("–†–µ–µ—Å—Ç—Ä –Ω–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤")
        values = worksheet.get_all_values()

        if not values or len(values) < 2:
            st.error("–õ–∏—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            df = None
        else:
            df = pd.DataFrame(values[1:], columns=values[0])

        if df is not None and not df.empty:
            st.markdown("### üîç –§–∏–ª—å—Ç—Ä—ã")

            col1, col2 = st.columns(2)
            with col1:
                selected_resp = st.selectbox("üë§ –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π", ["–í—Å–µ"] + sorted(df["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"].dropna().unique()))
            with col2:
                selected_type = st.selectbox("üìÑ –¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞", ["–í—Å–µ"] + sorted(df["–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞"].dropna().unique()))

            filtered_df = df.copy()
            if selected_resp != "–í—Å–µ":
                filtered_df = filtered_df[filtered_df["–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π"] == selected_resp]
            if selected_type != "–í—Å–µ":
                filtered_df = filtered_df[filtered_df["–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞"] == selected_type]

            if filtered_df.empty:
                st.info("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.")
            else:
                styled_html = """
<style>
    table { width: 100%; border-collapse: collapse; margin-top: 1rem; }
    th, td { padding: 12px 16px; text-align: left; border-bottom: 1px solid #ddd; font-size: 15px; }
    th { background-color: #f3f3f3; font-weight: bold; }
    tr:hover { background-color: #f9f9f9; }
    a { color: #0366d6; text-decoration: none; }
    a:hover { text-decoration: underline; }
</style>
"""
                table_html = "<table><thead><tr>"
                for col in filtered_df.columns:
                    table_html += f"<th>{col}</th>"
                table_html += "</tr></thead><tbody>"

                for _, row in filtered_df.iterrows():
                    table_html += "<tr>"
                    for col in filtered_df.columns:
                        val = row[col]
                        if isinstance(val, str) and val.startswith("http"):
                            val = f'<a href="{val}" target="_blank">–û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É</a>'
                        table_html += f"<td>{val}</td>"
                    table_html += "</tr>"

                table_html += "</tbody></table>"
                st.markdown(styled_html + table_html, unsafe_allow_html=True)

    except Exception as e:
        st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É: {e}")

    if st.button("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"):
        st.session_state['page'] = 'main_menu'

elif st.session_state['page'] == 'document_download':
    st.title("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    st.success("–î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ Google –î–∏—Å–∫ –∏ –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é:")

    for filename, path in st.session_state.get('generated_files', []):
        with open(path, "rb") as f:
            st.download_button(f"‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å {filename}", f.read(), file_name=filename)

    if st.button("üì¶ –°–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"):
        st.session_state['page'] = 'main_menu'
        st.session_state['form_data'] = {}
        st.session_state['generated_files'] = []